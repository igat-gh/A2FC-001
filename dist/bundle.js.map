{"version":3,"sources":["webpack:///./dist/bundle.js","webpack:///webpack/bootstrap ab306a952cc033d61684","webpack:///./src/index.ts","webpack:///./src/geolocation/index.ts","webpack:///./src/weather/index.ts","webpack:///./src/googlemap/index.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","geolocation_1","weather_1","googlemap_1","weatherApiKey","citiesInCycleCount","appContainerId","geoposotionToWeatherOptions","citiesCount","_a","lat","coords","latitude","lon","longitude","cnt","cityWeatherToGeoJSON","weatherItem","type","properties","city","name","weather","main","temperature","temp","min","temp_min","max","temp_max","humidity","pressure","windSpeed","wind","speed","windDegrees","deg","windGust","gust","icon","coordinates","coord","geometry","map","initMap","document","getElementById","center","lng","zoom","state","geoposition","getCurrentPosition","then","position","setCenter","setZoom","weatherOptions","getWeatherForCitiesInCycle","data","list","console","log","forEach","drawIcons","bind","catch","error","defaultOptions","enableHighAccuracy","options","Promise","resolve","reject","success","failure","navigator","geolocation","API_URL","iconsRoot","apiKey","resourse","url","buildURL","fetch","response","json","params","endpointWithApiKey","searchParams","Object","keys","key","join","element","google","maps","Map","setStyle","feature","getProperty","anchor","Point","geoJSONItems","addGeoJson"],"mappings":"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","file":"D:\\sandbox\\A2FC-001\\dist\\bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar geolocation_1 = __webpack_require__(1);\r\n\tvar weather_1 = __webpack_require__(2);\r\n\tvar googlemap_1 = __webpack_require__(3);\r\n\t// App configuration //\r\n\tvar weatherApiKey = \"ddb1f0abb0c8107ef81e20d834d797a2\";\r\n\tvar citiesInCycleCount = 50;\r\n\tvar appContainerId = \"app\";\r\n\t//////////////////////\r\n\t// Utils and helpers //\r\n\tvar geoposotionToWeatherOptions = function (citiesCount) {\r\n\t    return function (_a) {\r\n\t        var lat = _a.coords.latitude, lon = _a.coords.longitude;\r\n\t        return ({ lat: lat, lon: lon, cnt: citiesCount });\r\n\t    };\r\n\t};\r\n\tvar cityWeatherToGeoJSON = function (weatherItem) {\r\n\t    return {\r\n\t        type: \"Feature\",\r\n\t        properties: {\r\n\t            city: weatherItem.name,\r\n\t            weather: weatherItem.weather[0].main,\r\n\t            temperature: weatherItem.main.temp,\r\n\t            min: weatherItem.main.temp_min,\r\n\t            max: weatherItem.main.temp_max,\r\n\t            humidity: weatherItem.main.humidity,\r\n\t            pressure: weatherItem.main.pressure,\r\n\t            windSpeed: weatherItem.wind.speed,\r\n\t            windDegrees: weatherItem.wind.deg,\r\n\t            windGust: weatherItem.wind.gust,\r\n\t            icon: \"http://openweathermap.org/img/w/\" + weatherItem.weather[0].icon + \".png\",\r\n\t            coordinates: [weatherItem.coord.lon, weatherItem.coord.lat]\r\n\t        },\r\n\t        geometry: {\r\n\t            type: \"Point\",\r\n\t            coordinates: [weatherItem.coord.lon, weatherItem.coord.lat]\r\n\t        }\r\n\t    };\r\n\t};\r\n\t//////////////////////\r\n\tvar map = googlemap_1.initMap(document.getElementById(appContainerId), { center: { lat: 0, lng: 0 }, zoom: 4 });\r\n\tvar state = {\r\n\t    map: map,\r\n\t    geoposition: null,\r\n\t    weather: []\r\n\t};\r\n\tgeolocation_1.getCurrentPosition()\r\n\t    .then(function (position) {\r\n\t    state.geoposition = position;\r\n\t    var _a = state.geoposition.coords, lat = _a.latitude, lng = _a.longitude;\r\n\t    map.setCenter({ lat: lat, lng: lng });\r\n\t    map.setZoom(12);\r\n\t    return geoposotionToWeatherOptions(citiesInCycleCount)(position);\r\n\t})\r\n\t    .then(function (weatherOptions) {\r\n\t    return weather_1.getWeatherForCitiesInCycle(weatherApiKey)(weatherOptions);\r\n\t})\r\n\t    .then(function (data) {\r\n\t    state.weather = data.list;\r\n\t    console.log(data);\r\n\t    data.list.map(cityWeatherToGeoJSON).forEach(googlemap_1.drawIcons.bind(null, map));\r\n\t})\r\n\t    .catch(function (error) {\r\n\t    console.log(error);\r\n\t});\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar defaultOptions = {\r\n\t    enableHighAccuracy: true\r\n\t};\r\n\texports.getCurrentPosition = function (options) {\r\n\t    if (options === void 0) { options = defaultOptions; }\r\n\t    return new Promise(function (resolve, reject) {\r\n\t        var success = function (position) { return resolve(position); };\r\n\t        var failure = function (error) { return reject(error); };\r\n\t        navigator.geolocation.getCurrentPosition(success, failure, options);\r\n\t    });\r\n\t};\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar API_URL = \"http://api.openweathermap.org/data/2.5/\";\r\n\texports.iconsRoot = \"http://openweathermap.org/img/w/\";\r\n\texports.getWeatherForCitiesInCycle = function (apiKey) {\r\n\t    return function (options) {\r\n\t        var resourse = \"find\";\r\n\t        var url = buildURL(apiKey, resourse, options);\r\n\t        return fetch(url).then(function (response) { return response.json(); });\r\n\t    };\r\n\t};\r\n\tvar buildURL = function (apiKey, resourse, params) {\r\n\t    var endpointWithApiKey = \"\" + API_URL + resourse + \"?appid=\" + apiKey + \"&\";\r\n\t    var searchParams = Object.keys(params).map(function (key) { return (key + \"=\" + params[key]); }).join('&');\r\n\t    return endpointWithApiKey + searchParams;\r\n\t};\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t///<reference path=\"../../node_modules/@types/googlemaps/index.d.ts\"/>\r\n\t\"use strict\";\r\n\texports.initMap = function (element, options) {\r\n\t    var map = new google.maps.Map(element, options);\r\n\t    map.data.setStyle(function (feature) { return ({\r\n\t        icon: { url: feature.getProperty('icon'), anchor: new google.maps.Point(25, 25) }\r\n\t    }); });\r\n\t    return map;\r\n\t};\r\n\texports.drawIcons = function (map, geoJSONItems) {\r\n\t    return (map.data.addGeoJson(geoJSONItems), map);\r\n\t};\r\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// ./dist/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ab306a952cc033d61684","import { getCurrentPosition, Geoposition, PositionError } from \"./geolocation\"\r\nimport { getWeatherForCitiesInCycle, WeatherResponse, CityWeather } from \"./weather\"\r\nimport { initMap, drawIcons } from \"./googlemap\"\r\n\r\n// App configuration //\r\nconst weatherApiKey = \"ddb1f0abb0c8107ef81e20d834d797a2\"\r\nconst citiesInCycleCount = 50\r\nconst appContainerId = \"app\"\r\n//////////////////////\r\n\r\n// Utils and helpers //\r\nconst geoposotionToWeatherOptions = (citiesCount: number) =>\r\n  ({ coords: { latitude: lat }, coords: { longitude: lon }}: Geoposition) =>\r\n    ({ lat, lon, cnt: citiesCount })\r\n\r\n\r\nconst cityWeatherToGeoJSON = (weatherItem: CityWeather) => {\r\n  return {\r\n      type: \"Feature\",\r\n      properties: {\r\n        city: weatherItem.name,\r\n        weather: weatherItem.weather[0].main,\r\n        temperature: weatherItem.main.temp,\r\n        min: weatherItem.main.temp_min,\r\n        max: weatherItem.main.temp_max,\r\n        humidity: weatherItem.main.humidity,\r\n        pressure: weatherItem.main.pressure,\r\n        windSpeed: weatherItem.wind.speed,\r\n        windDegrees: weatherItem.wind.deg,\r\n        windGust: weatherItem.wind.gust,\r\n        icon: `http://openweathermap.org/img/w/${weatherItem.weather[0].icon}.png`,\r\n        coordinates: [ weatherItem.coord.lon, weatherItem.coord.lat ]\r\n      },\r\n      geometry: {\r\n        type: \"Point\",\r\n        coordinates: [ weatherItem.coord.lon, weatherItem.coord.lat ]\r\n      }\r\n    }\r\n}\r\n//////////////////////\r\n\r\nconst map = initMap(document.getElementById(appContainerId), { center: {lat: 0, lng: 0}, zoom: 4 })\r\n\r\ntype State = {\r\n  map?: google.maps.Map,\r\n  geoposition?: Geoposition,\r\n  weather?: CityWeather[]\r\n}\r\n\r\nconst state: State = {\r\n  map: map,\r\n  geoposition: null,\r\n  weather: []\r\n}\r\n\r\ngetCurrentPosition()\r\n  .then((position: Geoposition) => {\r\n    state.geoposition = position\r\n    const { latitude: lat, longitude: lng } = state.geoposition.coords\r\n    map.setCenter({ lat, lng })\r\n    map.setZoom(12)\r\n    return geoposotionToWeatherOptions(citiesInCycleCount)(position)\r\n  })\r\n  .then((weatherOptions) => {\r\n    return getWeatherForCitiesInCycle(weatherApiKey)(weatherOptions)\r\n  })\r\n  .then((data: WeatherResponse) => {\r\n    state.weather = data.list\r\n    console.log(data)\r\n    data.list.map(cityWeatherToGeoJSON).forEach(drawIcons.bind(null, map))\r\n  })\r\n  .catch((error: PositionError | Error) => {\r\n    console.log(error)\r\n  })\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/index.ts","\r\ninterface IGeoOptions {\r\n  enableHighAccuracy: boolean\r\n}\r\n\r\ntype GeopositionResponse = Geoposition | PositionError\r\n\r\nexport type Geoposition = {\r\n  coords: {\r\n    latitude: number,\r\n    longitude: number\r\n  }\r\n}\r\n\r\nexport type PositionError= {\r\n  code: number,\r\n  message: string\r\n}\r\n\r\nconst defaultOptions: IGeoOptions = {\r\n  enableHighAccuracy: true\r\n}\r\n\r\nexport const getCurrentPosition =\r\n  (options: IGeoOptions = defaultOptions): Promise<GeopositionResponse> => {\r\n    return new Promise((resolve, reject) => {\r\n      const success = (position: Geoposition): void => resolve(position)\r\n      const failure = (error: PositionError): void => reject(error)\r\n\r\n      navigator.geolocation.getCurrentPosition(success, failure, options)\r\n    })\r\n  }\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/geolocation/index.ts","\r\ninterface CitiesInCycleOptions {\r\n  lat: number,\r\n  lon: number,\r\n  cnt: number\r\n}\r\n\r\ntype UrlParams = CitiesInCycleOptions\r\n\r\nexport type CityWeather = {\r\n  clouds: { all: number },\r\n  wind: { deg: number, speed: number, gust: number },\r\n  coord: { lat: number, lon: number },\r\n  main: {\r\n    humidity: number,\r\n    pressure: number,\r\n    temp: number,\r\n    temp_max: number,\r\n    temp_min: number\r\n  },\r\n  weather: {\r\n    description: string,\r\n    icon: string,\r\n    main: string\r\n  }[],\r\n  name: string,\r\n  dt: number,\r\n  id: number\r\n}\r\n\r\nexport type WeatherResponse = {\r\n  cod: string,\r\n  count: number,\r\n  message: string,\r\n  list: CityWeather[]\r\n}\r\n\r\nconst API_URL = \"http://api.openweathermap.org/data/2.5/\"\r\n\r\nexport const iconsRoot = \"http://openweathermap.org/img/w/\"\r\n\r\nexport const getWeatherForCitiesInCycle = (apiKey: string) =>\r\n  (options: CitiesInCycleOptions) => {\r\n    const resourse = \"find\"\r\n    const url = buildURL(apiKey, resourse, options)\r\n\r\n    return fetch(url).then((response) => response.json())\r\n  }\r\n\r\nconst buildURL = (apiKey: string, resourse: string, params: UrlParams) => {\r\n  const endpointWithApiKey = `${API_URL}${resourse}?appid=${apiKey}&`\r\n  const searchParams = Object.keys(params).map(key => `${key}=${params[key]}`).join('&')\r\n\r\n  return endpointWithApiKey + searchParams\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/weather/index.ts","///<reference path=\"../../node_modules/@types/googlemaps/index.d.ts\"/>\r\n\r\ninterface IGoogleMapOptions {\r\n  center: {\r\n    lat: number,\r\n    lng: number\r\n  },\r\n  zoom: number,\r\n  zoomControl?: boolean,\r\n  scaleControl?: boolean\r\n}\r\n\r\nexport const initMap =\r\n  (element: HTMLElement, options: IGoogleMapOptions) => {\r\n    const map = new google.maps.Map(element, options)\r\n\r\n    map.data.setStyle((feature) => ({\r\n      icon: { url: feature.getProperty('icon'), anchor: new google.maps.Point(25, 25) }\r\n    }))\r\n\r\n    return map\r\n  }\r\n\r\nexport const drawIcons =\r\n  (map: google.maps.Map, geoJSONItems: Object) =>\r\n    (map.data.addGeoJson(geoJSONItems), map)\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/googlemap/index.ts"],"sourceRoot":""}