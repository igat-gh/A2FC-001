{"version":3,"sources":["webpack:///./dist/bundle.js","webpack:///webpack/bootstrap 0e12471756b7c5ae2d5f","webpack:///./src/index.ts","webpack:///./src/geolocation/index.ts","webpack:///./src/weather/index.ts","webpack:///./src/googlemap/index.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","geolocation_1","weather_1","googlemap_1","weatherMapsApiKey","citiesInCycleCount","appContainerId","geoposotionToWeatherOptions","citiesCount","_a","lat","coords","latitude","lon","longitude","cnt","weatherInCycle","getWeatherForCitiesInCycle","map","initMap","document","getElementById","center","lng","zoom","console","log","getCurrentPosition","then","data","catch","error","defaultOptions","enableHighAccuracy","options","Promise","resolve","reject","success","position","failure","navigator","geolocation","API_URL","apiKey","resourse","url","buildURL","fetch","response","json","params","endpointWithApiKey","searchParams","Object","keys","key","join","element","google","maps","Map"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/B,YE9CD,IAAAW,GAAAX,EAA+D,GAC/DY,EAAAZ,EAA4D,GAC5Da,EAAAb,EAAwB,GAGlBc,EAAoB,mCAEpBC,EAAqB,GACrBC,EAAiB,MAIjBC,EAA8B,SAACC,GACnC,gBAACC,GF8CM,GE9CMC,GAAAD,EAAAE,OAAAC,SAA2BC,EAAAJ,EAAAE,OAAAG,SACtC,QAAGJ,MAAKG,MAAKE,IAAKP,KAGhBQ,EAAiBd,EAAAe,2BAA2Bb,GAE5Cc,EAAMf,EAAAgB,QAAQC,SAASC,eAAef,IAAmBgB,QAASZ,IAAK,EAAGa,IAAK,GAAIC,KAAM,GAE/FC,SAAQC,IAAIR,GAEZjB,EAAA0B,qBACGC,KAAKrB,EAA4BF,IACjCuB,KAAKZ,GACLY,KAAK,SAACC,GACLJ,QAAQC,IAAIG,KAEbC,MAAM,SAACC,GACNN,QAAQC,IAAIK,MFkDV,SAASrC,EAAQD,GAEtB,YG/DD,IAAMuC,IACJC,oBAAoB,EAGTxC,GAAAkC,mBACX,SAACO,GACC,MADD,UAAAA,MAAAF,GACQ,GAAIG,SAAQ,SAACC,EAASC,GAC3B,GAAMC,GAAU,SAACC,GAAgC,MAAAH,GAAQG,IACnDC,EAAU,SAACT,GAA+B,MAAAM,GAAON,GAEvDU,WAAUC,YAAYf,mBAAmBW,EAASE,EAASN,OHqE3D,SAASxC,EAAQD,GAEtB,YIpED,IAAMkD,GAAU,yCAEHlD,GAAAwB,2BAA6B,SAAC2B,GACzC,gBAACV,GACC,GAAMW,GAAW,OACXC,EAAMC,EAASH,EAAQC,EAAUX,EAEvC,OAAOc,OAAMF,GAAKlB,KAAK,SAACqB,GAAa,MAAAA,GAASC,UAGlD,IAAMH,GAAW,SAACH,EAAgBC,EAAkBM,GAClD,GAAMC,GAAqB,GAAGT,EAAUE,EAAQ,UAAUD,EAAM,IAC1DS,EAAeC,OAAOC,KAAKJ,GAAQjC,IAAI,SAAAsC,GAAO,MAAGA,GAAG,IAAIL,EAAOK,KAAQC,KAAK,IAElF,OAAOL,GAAqBC,IJwExB,SAAS3D,EAAQD,GAGtB,YK/GYA,GAAA0B,QACX,SAACuC,EAAsBxB,GACrB,UAAKyB,QAAOC,KAAKC,IAAIH,EAASxB","file":"/home/igat/www/projects/A2MP/001_Typescript/dist/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar geolocation_1 = __webpack_require__(1);\n\tvar weather_1 = __webpack_require__(2);\n\tvar googlemap_1 = __webpack_require__(3);\n\t// App configuration //\n\tvar weatherMapsApiKey = \"ddb1f0abb0c8107ef81e20d834d797a2\";\n\t// const googleMapsApiKey = \"AIzaSyD8cRmrddIZI_FMfQgfEod4SBxnXzZYHuU\"\n\tvar citiesInCycleCount = 50;\n\tvar appContainerId = \"app\";\n\t//////////////////////\n\t// Utils and helpers //\n\tvar geoposotionToWeatherOptions = function (citiesCount) {\n\t    return function (_a) {\n\t        var lat = _a.coords.latitude, lon = _a.coords.longitude;\n\t        return ({ lat: lat, lon: lon, cnt: citiesCount });\n\t    };\n\t};\n\t//////////////////////\n\tvar weatherInCycle = weather_1.getWeatherForCitiesInCycle(weatherMapsApiKey);\n\tvar map = googlemap_1.initMap(document.getElementById(appContainerId), { center: { lat: 0, lng: 0 }, zoom: 4 });\n\tconsole.log(map);\n\tgeolocation_1.getCurrentPosition()\n\t    .then(geoposotionToWeatherOptions(citiesInCycleCount))\n\t    .then(weatherInCycle)\n\t    .then(function (data) {\n\t    console.log(data);\n\t})\n\t    .catch(function (error) {\n\t    console.log(error);\n\t});\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar defaultOptions = {\n\t    enableHighAccuracy: true\n\t};\n\texports.getCurrentPosition = function (options) {\n\t    if (options === void 0) { options = defaultOptions; }\n\t    return new Promise(function (resolve, reject) {\n\t        var success = function (position) { return resolve(position); };\n\t        var failure = function (error) { return reject(error); };\n\t        navigator.geolocation.getCurrentPosition(success, failure, options);\n\t    });\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar API_URL = \"http://api.openweathermap.org/data/2.5/\";\n\texports.getWeatherForCitiesInCycle = function (apiKey) {\n\t    return function (options) {\n\t        var resourse = \"find\";\n\t        var url = buildURL(apiKey, resourse, options);\n\t        return fetch(url).then(function (response) { return response.json(); });\n\t    };\n\t};\n\tvar buildURL = function (apiKey, resourse, params) {\n\t    var endpointWithApiKey = \"\" + API_URL + resourse + \"?appid=\" + apiKey + \"&\";\n\t    var searchParams = Object.keys(params).map(function (key) { return (key + \"=\" + params[key]); }).join('&');\n\t    return endpointWithApiKey + searchParams;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t///<reference path=\"../../node_modules/@types/googlemaps/index.d.ts\"/>\n\t\"use strict\";\n\texports.initMap = function (element, options) {\n\t    return (new google.maps.Map(element, options));\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// ./dist/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0e12471756b7c5ae2d5f","import { getCurrentPosition, Geoposition, PositionError } from \"./geolocation\"\nimport { getWeatherForCitiesInCycle, WeatherResponse } from \"./weather\"\nimport { initMap } from \"./googlemap\"\n\n// App configuration //\nconst weatherMapsApiKey = \"ddb1f0abb0c8107ef81e20d834d797a2\"\n// const googleMapsApiKey = \"AIzaSyD8cRmrddIZI_FMfQgfEod4SBxnXzZYHuU\"\nconst citiesInCycleCount = 50\nconst appContainerId = \"app\"\n//////////////////////\n\n// Utils and helpers //\nconst geoposotionToWeatherOptions = (citiesCount: number) =>\n  ({ coords: { latitude: lat }, coords: { longitude: lon }}: Geoposition) =>\n    ({ lat, lon, cnt: citiesCount })\n//////////////////////\n\nconst weatherInCycle = getWeatherForCitiesInCycle(weatherMapsApiKey)\n\nconst map = initMap(document.getElementById(appContainerId), { center: {lat: 0, lng: 0}, zoom: 4 })\n\nconsole.log(map)\n\ngetCurrentPosition()\n  .then(geoposotionToWeatherOptions(citiesInCycleCount))\n  .then(weatherInCycle)\n  .then((data: WeatherResponse) => {\n    console.log(data)\n  })\n  .catch((error: PositionError | Error) => {\n    console.log(error)\n  })\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/index.ts","\ninterface GeoOptions {\n  enableHighAccuracy: boolean\n}\n\ntype GeopositionResponse = Geoposition | PositionError\n\nexport type Geoposition = {\n  coords: {\n    latitude: number,\n    longitude: number\n  }\n}\n\nexport type PositionError= {\n  code: number,\n  message: string\n}\n\nconst defaultOptions: GeoOptions = {\n  enableHighAccuracy: true\n}\n\nexport const getCurrentPosition =\n  (options: GeoOptions = defaultOptions): Promise<GeopositionResponse> => {\n    return new Promise((resolve, reject) => {\n      const success = (position: Geoposition): void => resolve(position)\n      const failure = (error: PositionError): void => reject(error)\n\n      navigator.geolocation.getCurrentPosition(success, failure, options)\n    })\n  }\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/geolocation/index.ts","\ninterface CitiesInCycleOptions {\n  lat: number,\n  lon: number,\n  cnt: number\n}\n\ntype UrlParams = CitiesInCycleOptions\n\ntype CityWeather = {\n  clouds: { all: number },\n  wind: { deg: number, speed: number },\n  coord: { lat: number, lon: number },\n  main: {\n    humidity: number,\n    pressure: number,\n    temp: number,\n    temp_max: number,\n    temp_min: number\n  },\n  name: string,\n  dt: number,\n  id: number\n}\n\nexport type WeatherResponse = {\n  cod: string,\n  count: number,\n  message: string,\n  list: CityWeather[]\n}\n\nconst API_URL = \"http://api.openweathermap.org/data/2.5/\"\n\nexport const getWeatherForCitiesInCycle = (apiKey: string) =>\n  (options: CitiesInCycleOptions) => {\n    const resourse = \"find\"\n    const url = buildURL(apiKey, resourse, options)\n\n    return fetch(url).then((response) => response.json())\n  }\n\nconst buildURL = (apiKey: string, resourse: string, params: UrlParams) => {\n  const endpointWithApiKey = `${API_URL}${resourse}?appid=${apiKey}&`\n  const searchParams = Object.keys(params).map(key => `${key}=${params[key]}`).join('&')\n\n  return endpointWithApiKey + searchParams\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/weather/index.ts","///<reference path=\"../../node_modules/@types/googlemaps/index.d.ts\"/>\n\ninterface GoogleMapOptions {\n  center: {\n    lat: number,\n    lng: number\n  },\n  zoom: number\n}\n\nexport const initMap =\n  (element: HTMLElement, options: GoogleMapOptions) =>\n    (new google.maps.Map(element, options))\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/googlemap/index.ts"],"sourceRoot":""}